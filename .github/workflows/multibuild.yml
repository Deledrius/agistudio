name: Build

on: [ push ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: 10.15

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macOS-latest ]

    steps:
    - uses: actions/checkout@v4
      # We use tags to determine versioning, so we need the entire history
      # (fetching tags post-checkout is insufficient)
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: "6.7.1"
        modules: "qtmultimedia"
        cache: true

    - name: Configure CMake
      shell: bash
      # Run cmake's configuration from inside the source tree, allowing
      # the versioning scripts to find the git history.
      working-directory: ${{github.workspace}}
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX="${{runner.workspace}}/install" -DCPACK_PACKAGE_DIRECTORY="${{runner.workspace}}/package" -S "${{github.workspace}}" -B "${{runner.workspace}}/build"

    - name: Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE --target install
    
    - name: Create Package
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE --target package
      
      # Upload artifacts for publishing if this is a versioned tag.
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: AGIStudio-${{github.ref_name}}-${{runner.os}}
        compression-level: 0
        path: |
          ${{runner.workspace}}/package/
          !${{runner.workspace}}/package/_CPack_Packages

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{github.workspace}}/artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{github.workspace}}/artifacts/*/*
